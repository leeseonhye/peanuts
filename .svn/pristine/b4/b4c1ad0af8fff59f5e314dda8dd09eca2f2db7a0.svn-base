package kr.co.hta.peanuts.web.controllers;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.FlashMap;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.co.hta.peanuts.service.MapService;
import kr.co.hta.peanuts.vo.Daily;
import kr.co.hta.peanuts.vo.Location;
import kr.co.hta.peanuts.vo.Planner;
import kr.co.hta.peanuts.vo.PlannerLocation;
import kr.co.hta.peanuts.vo.PlannerLocationForm;

@Controller
@RequestMapping("/map")
public class MapController {

	@Autowired
	private MapService mapService;
	
	// addNewPlan으로 진입하는 기능
	@RequestMapping("/addPlanForm.do")
	public String addPlanForm() {
		return "map/addNewPlan.jsp";
	}
	
	// 새로운 planner를 생성함과 동시에 해당 날짜에 맞는 daily 테이블을 생성해서 key를 부여하기
	@RequestMapping("/addPlan.do")
	public String addPlan(Planner planner, HttpSession session) throws ParseException {
		// 새로운 planner 생성
		planner.setNo(100);
		planner.setUserId("hong");
		planner.setStartDate("2018-05-06");
		planner.setEndDate("2018-05-10");
		
		//mapService.addNewPlan(planner);

		// daily key 생성
		int dates = mapService.dailyNum(planner);
		for (int i=0; i<dates; i++) {
			Daily daily = new Daily();
			
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			Date startDate = sdf.parse(planner.getStartDate());
			
			Calendar c = Calendar.getInstance();
			c.setTime(startDate);		// 여행 시작일
			c.add(Calendar.DATE, i);	// 여행시작일 + i
			Date output = c.getTime();
			
			daily.setPlanNo(planner.getNo());
			daily.setKey(100+i);		// 100자리에는 나중에 아무것도 넣지 않음(sequence 쓰기)
			daily.setIndex(i+1);
			daily.setDate(output);
			
			//mapService.addNewDaily(daily);
		}
		
		//redirectAttributes.addFlashAttribute("planner", planner);
		session.setAttribute("planner", planner);
		Planner planner1 = (Planner) session.getAttribute("planner");
		System.out.println(planner1.toString());
		return "redirect:/map/map.do";
	}
	
	// map.jsp로 이동하는 기능
	@RequestMapping("/map.do")
	public String map(HttpSession session, Model model) {
		// session에 있는거 받아서 사용하기
		// 여기서 달력의 min값 설정하기
		Planner planner = (Planner) session.getAttribute("planner");
		System.out.println(planner);
		// 만약 planner이 존재하지 않으면 main 화면으로 보낸다
		if (planner == null) {
			return "redirect:/map/addPlanForm.do";
		}
		
		// session에 planner라는 이름으로 저장돼있는 planner의 planNo값을 꺼내온다
		String minDate = mapService.getMinDate(planner.getNo());
		model.addAttribute("minDate", minDate);
		
		return "map/map.jsp";
	}
	
	// city로 name을 찾고, name으로 해당 id를 찾아내는 기능
	@RequestMapping("/getLocation.do")
	@ResponseBody
	public List<Location> getLocation(Location location) {
		return mapService.getLocation(location);
	}
	
	// PlannerLocation에 데이터를 넣어준다
	// RedirectAttributes는 redirect할때 한번 데이터를 넘겨줄 수 있게 도와준다
	// planner를 session에 넣어놨기 때문에 RedirectAttributes redirectAttributes는 필요없어보이지만 일단 놔둠 
	@RequestMapping("/addPL.do")
	public String addPL(PlannerLocationForm pl, RedirectAttributes redirectAttributes) {
		Planner planner = mapService.addPL(pl);
		redirectAttributes.addFlashAttribute("planner", planner);
		return "redirect:/map/map.do";
	}
	
	// planNo이 일치하는 일정의 plannerLocation을 불러온다
	@RequestMapping("/getPLByPno.do")
	@ResponseBody
	public List<PlannerLocationForm> getPLByPno(int planNo) {
		return mapService.getPLByPno(planNo);
	}
	
	// planNo와 locationId로 일정을 삭제한다
	@RequestMapping("delPLByPnoAndLid.do")
	public String delPLByPnoAndLid(PlannerLocationForm pl) {
		return "redirect:/map/map.jsp";
	}
	
	// img page를 로딩하는 기능
	@RequestMapping("getMapImg.do")
	public String getMapImg(Model model) {
		String mapImg = mapService.getMapImage(1, "");
		model.addAttribute("mapImg", mapImg);
		return "map/image-map.jsp";
	}
}