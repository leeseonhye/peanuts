<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.hta.peanuts.dao.TicketDao">

	<select id="getAllTicket" resultType="Ticket">
		select
			ticket_no as no,
			ticket_name as name,
			ticket_price as price,
			ticket_category as category,
			ticket_images as images,
			discount_rate as discountRate,
			selling_start as sellingStart,
			selling_end as sellingEnd,
			location_city as locationCity
		from
			ticket
	</select>

	<select id="getTicketByNo" parameterType="int" resultType="Ticket">
		select
			ticket_no as no,
			ticket_name as name,
			ticket_price as price,
			ticket_category as category,
			ticket_images as images,
			discount_rate as discountRate,
			selling_start as sellingStart,
			selling_end as sellingEnd,
			location_city as locationCity
		from
			ticket
		where
			ticket_no = #{value}
	</select>
	
	<select id="getTicketImageByNo" parameterType="int" resultType="Images">
		select
			no,
			images_category as category,
			images_name as name
		from
			images
		where
			no = #{value}
	</select>
	
	<select id="getTicketReviewAmount" parameterType="int" resultType="int">
		select 
			count(*)
		from
			ticket_review
		where
			ticket_no = #{value}
	</select>
	
	<select id="getTicketGradeAverage" parameterType="int" resultType="double">
		select 
			avg(ticket_grade)
		from 
			ticket_review
		where 
			ticket_no = #{value}
	</select>
	
	<select id="getTicketReviewAmountGroupByGrade" parameterType="int" resultType="hashmap">
		select 
			nvl((sum ( decode(TICKET_GRADE, 1, 1, 0) )/count(*))*100,0) one,
			nvl((sum ( decode(TICKET_GRADE, 2, 1, 0) )/count(*))*100,0) two,
			nvl((sum ( decode(TICKET_GRADE, 3, 1, 0) )/count(*))*100,0) three,
			nvl((sum ( decode(TICKET_GRADE, 4, 1, 0) )/count(*))*100,0) four,
			nvl((sum ( decode(TICKET_GRADE, 5, 1, 0) )/count(*))*100,0) five
		from	
			ticket_review 
		where
			ticket_no = #{value}
	</select>
	
	<select id="getReviewImagesByTicketNo" parameterType="int" resultType="hashmap">
		select 
			images_name name
		from 
			ticket_review_images
		where 
			no = ${value}
	</select>
	
	<select id="getAllReviewByTicketNo" parameterType="int" resultType="Review">
		select 
			review_no reviewNo, 
			ticket_no ticketNo, 
			user_id userId, 
			ticket_grade ticketGrade, 
			review_contents reviewContents, 
			create_date createDate
		from 
			ticket_review
		where 
			ticket_no = 1
	</select>
	
</mapper>