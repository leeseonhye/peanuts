package kr.co.hta.peanuts.web.controllers;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.co.hta.peanuts.annotation.LoginUser;
import kr.co.hta.peanuts.service.UserService;
import kr.co.hta.peanuts.vo.Message;
import kr.co.hta.peanuts.vo.User;
import kr.co.hta.peanuts.web.form.UserForm;

@Controller
@RequestMapping("/user")
public class UserController {
	
	@Value("${user.photo.saved.directory}")
	private String path;

	@Autowired
	private UserService userService;
	
	@RequestMapping("/form.do")
	public String addUserForm() {
		
		return "user/form.jsp";
	}
	
	@RequestMapping("/register.do")
	public String addUser(UserForm userForm) throws IOException {
		
		User user = new User();
		user.setName(userForm.getName());
		user.setId(userForm.getId());
		user.setPwd(userForm.getPwd());
		user.setEmail(userForm.getEmail());
		user.setTel(userForm.getPhone());
		
		MultipartFile upfile = userForm.getProfile();
		if(!upfile.isEmpty()) {
			String originalFileName = upfile.getOriginalFilename();
			FileCopyUtils.copy(upfile.getBytes(), new File(path,originalFileName));
			user.setProfile(upfile.getOriginalFilename());
		} else {
			user.setProfile("DEFAULT_PROFILE.JPG");
		}
		
		userService.addUser(user);
		
		return "redirect:/home.do";
	}
	
	@RequestMapping(value="/login.do", method=RequestMethod.GET)
	public String login() {
		return "user/loginform.jsp";
	}
	
	@RequestMapping(value="/login.do", method=RequestMethod.POST)
	public String login(String id, String pwd, HttpSession session) {
		
		User user = userService.getUserDetail(id);
		if(user == null) {
			return "redirect:/user/login.do?err=fail";
		}
		if(!user.getPwd().equals(pwd)) {
			return "redirect:/user/login.do?err=fail";
		}
		session.setAttribute("LOGIN_USER", user);
		
		return "redirect:/home.do";
	}
	
	@RequestMapping("/logout.do")
	public String logout(HttpSession session) {
		session.invalidate();
		return "redirect:/home.do";
	}
	// 사용자 프로필 파일변경
	@RequestMapping("/imgModify.do")
	public String imgModify(@LoginUser User user, MultipartFile profile) throws Exception {
		User userform = new User();
		userform.setId(user.getId());

		MultipartFile modifile = profile;
		if(!modifile.isEmpty()) {
			String originalFileName = modifile.getOriginalFilename();
			FileCopyUtils.copy(modifile.getBytes(), new File(path,originalFileName));
			userform.setProfile(modifile.getOriginalFilename());
		} else {
			userform.setProfile("DEFAULT_PROFILE.JPG");
		}
		
		userService.imgModify(userform);
		
		return "redirect:/user/mypage.do?id="+userform.getId();
	}
	// 마이페이지 사용자 플래너 불러오기
	//@RequestMapping("/mypage.do")
	//public String mypage(@LoginUser User user) throws Exception {
	//	userService.getByIdPlanner(user.getId());
	//	return "user/mypage.jsp";
	//}
	
	@RequestMapping("/mymessage.do")
	public String myMessage(Model model) {
		//로그인 사용자가 수신한 모든 메시지
		Message message = new Message();
		/*		User user = (User) session.getAttribute("LOGIN_USER");
		message.setReceiver(user.getId());*/
		message.setReceiver("hong");	
		List<Message> allMessages = userService.getMessages(message);
		
		//오늘 날짜
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String today = sdf.format(new Date());

		//로그인한 사용자가 수신한 메시지 갯수
		int newCnt = 0;
		for(Message m : allMessages) {
			if(m.getCreateDateToString().equals(today)) {
				newCnt++;
			}
		}
		if(newCnt >= 99) {
			newCnt = 99;
		} 		
		model.addAttribute("receivedMsg", allMessages);
		model.addAttribute("today", today);
		model.addAttribute("newCnt",newCnt);
		return "user/message.jsp";
	}
	
	@RequestMapping("/getMessages.do")
	@ResponseBody
	public List<Message> getMessages(String keyword, HttpSession session) {
		Message message = new Message();
/*		User user = (User) session.getAttribute("LOGIN_USER");
		message.setReceiver(user.getId());*/
		message.setReceiver("hong");
		if(keyword.equals("all")) {
			message.setCriteria("all");
		}
		if(keyword.equals("mark")) {
			message.setCriteria("mark");
		}
		if(keyword.equals("unread")) {
			message.setCriteria("unread");
		}
		if(keyword.equals("read")) {
			message.setCriteria("read");
		}
		return userService.getMessages(message);
	}
	
	@RequestMapping("/getSentMessages.do")
	@ResponseBody
	public List<Message> getSentMessages(HttpSession session) {
		/*User user = (User) session.getAttribute("LOGIN_USER");*/
		return userService.getSentMessages("hong");
	}
}
